#-----------------------------------------------------------------------------
#
#  TSDuck - The MPEG Transport Stream Toolkit
#  Copyright (c) 2005-2022, Thierry Lelegard
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
#  THE POSSIBILITY OF SUCH DAMAGE.
#
#-----------------------------------------------------------------------------
#
#  GitHub Actions configuration file : Nightly builds
#
#  Builds installers for Windows and Ubuntu. Build programmer's doc package.
#  Upload them all as artifacts of this workflow.
#
#-----------------------------------------------------------------------------

name: Nightly build

on:
  # Trigger the workflow every day at 00:40 UTC.
  schedule:
    - cron: '40 0 * * *'
  # Allow manual trigger.
  workflow_dispatch:

jobs:
  windows:
    name: Windows build
    runs-on: windows-latest
    steps:

    - name: Get TSDuck repo
      uses: actions/checkout@master

    - name: Check if rebuild is necessary
      run: |
        try {
            $response = Invoke-RestMethod https://tsduck.io/download/prerelease/get-versions
            $remote_version = $response.latest
        }
        catch {
            $remote_version = ""
        }
        $version = (& scripts\get-version-from-sources.ps1)
        $rebuild = ($version -ne $remote_version).ToString().ToLower()
        $version | Out-File version.txt
        Write-Output "Current version: $version, latest on tsduck.io: $remote_version"
        Write-Output "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "REBUILD=$rebuild" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Check same version
      if: env.REBUILD == 'false'
      run: Write-Output "Same version as latest pre-release, not rebuilt"

    - name: Install dependencies
      if: env.REBUILD == 'true'
      run: scripts/install-prerequisites.ps1 -GitHubActions -NoDoxygen -NoPause

    - name: Build installers
      if: env.REBUILD == 'true'
      run: scripts/build-installer.ps1 -NoPause -NoLowPriority

    - name: Check built version (64-bit)
      if: env.REBUILD == 'true'
      run: bin/Release-x64/tsversion.exe --version=all

    - name: Check built version (32-bit)
      if: env.REBUILD == 'true'
      run: bin/Release-Win32/tsversion.exe --version=all

    - name: Test installation (64-bit)
      if: env.REBUILD == 'true'
      run: |
        Start-Process -Wait -FilePath installers/TSDuck-Win64-${{ env.VERSION }}.exe -ArgumentList @("/S", "/all=true")
        # Propagate updated paths to next steps.
        $path       = [System.Environment]::GetEnvironmentVariable("Path",       [System.EnvironmentVariableTarget]::Machine)
        $pythonpath = [System.Environment]::GetEnvironmentVariable("PYTHONPATH", [System.EnvironmentVariableTarget]::Machine)
        $classpath  = [System.Environment]::GetEnvironmentVariable("CLASSPATH",  [System.EnvironmentVariableTarget]::Machine)
        Write-Output "Path=$path"             | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "PYTHONPATH=$pythonpath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "CLASSPATH=$classpath"   | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Download test suite
      if: env.REBUILD == 'true'
      run: |
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -UseBasicParsing -Uri https://github.com/tsduck/tsduck-test/archive/master.zip -OutFile test.zip
        Expand-Archive test.zip -DestinationPath . -Force
        Move-Item tsduck-test-master ../tsduck-test -Force

    - name: Run test suite on installed version
      if: env.REBUILD == 'true'
      shell: bash
      run: |
        cd ../tsduck-test
        ./run-all-tests.sh && status=$? || status=$?
        for f in $(find tmp -name '*.diff'); do
            echo "==== $f";
            cat "$f"
        done
        exit $status

    - name: Upload version
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: version
        path: version.txt
        retention-days: 5

    - name: Upload 64-bit installer
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: installer-64
        path: installers/TSDuck-Win64-${{ env.VERSION }}.exe
        retention-days: 5

    - name: Upload 64-bit portable
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: portable-64
        path: installers/TSDuck-Win64-${{ env.VERSION }}-Portable.zip
        retention-days: 5

    - name: Upload 32-bit installer
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: installer-32
        path: installers/TSDuck-Win32-${{ env.VERSION }}.exe
        retention-days: 5

    - name: Upload 32-bit portable
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: portable-32
        path: installers/TSDuck-Win32-${{ env.VERSION }}-Portable.zip
        retention-days: 5

  linux:
    name: Linux build
    runs-on: ubuntu-latest
    steps:

    - name: Get TSDuck repo
      uses: actions/checkout@master

    - name: Install dependencies
      run: |
        scripts/install-prerequisites.sh
        sudo apt install -y jq

    - name: Check if rebuild is necessary
      run: |
        remote_version=$(curl -sL https://tsduck.io/download/prerelease/get-versions | jq -r '.latest?'; true)
        version=$(scripts/get-version-from-sources.sh)
        fullversion=$(scripts/get-version-from-sources.sh --full)
        [[ "$version" == "$remote_version" ]] && rebuild=false || rebuild=true
        echo "Current version: $version, latest on tsduck.io: $remote_version"
        echo "VERSION=$version" >>$GITHUB_ENV
        echo "FULLVERSION=$fullversion" >>$GITHUB_ENV
        echo "REBUILD=$rebuild" >>$GITHUB_ENV

    - name: Check same version
      if: env.REBUILD == 'false'
      run: echo "Same version as latest pre-release, not rebuilt"

    - name: Build TSDuck
      if: env.REBUILD == 'true'
      run: make -j5 && make installer

    - name: Check built version
      if: env.REBUILD == 'true'
      run: source scripts/setenv.sh && tsversion --version=all

    - name: Test installation
      if: env.REBUILD == 'true'
      run: make install-installer

    - name: Run test suite on installed version
      if: env.REBUILD == 'true'
      run: |
        mkdir -p ../tsduck-test
        cd ../tsduck-test
        curl -s -L https://github.com/tsduck/tsduck-test/tarball/master | tar xz --strip 1
        ./run-all-tests.sh && status=$? || status=$?
        for f in $(find tmp -name '*.diff'); do
            echo "==== $f";
            cat "$f"
        done
        exit $status

    - name: Prepare upload package
      if: env.REBUILD == 'true'
      run: |
        tsp --version=short &>tsp.version.txt
        tsp --list=input &>tsp.input.txt
        tsp --list=output &>tsp.output.txt
        tsp --list=packet &>tsp.packet.txt
        for file in src/tstools/*.cpp; do
            name=$(basename $file .cpp)
            if [[ -n $(which $name) ]]; then
                echo -n $name:
                $name --help=description 2>&1
            fi
        done >tsduck.commands.txt
        zip -q9 tsduck.commands.zip tsp.version.txt tsp.input.txt tsp.output.txt tsp.packet.txt tsduck.commands.txt

    - name: Upload command lists
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: command-lists
        path: tsduck.commands.zip
        retention-days: 5

    - name: Upload Ubuntu package
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: ubuntu-package
        path: installers/tsduck_${{ env.FULLVERSION }}_amd64.deb
        retention-days: 5
        
    - name: Upload Ubuntu dev package
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: ubuntu-dev-package
        path: installers/tsduck-dev_${{ env.FULLVERSION }}_amd64.deb
        retention-days: 5
        
  doc:
    name: Documentation build
    # ubuntu-latest is currently ubuntu-20.04, try to grab a more recent version of doxygen.
    runs-on: ubuntu-22.04
    steps:

    - name: Get TSDuck repo
      uses: actions/checkout@master

    - name: Install dependencies
      run: scripts/install-prerequisites.sh

    - name: Check if rebuild is necessary
      run: |
        remote_version=$(curl -sL https://tsduck.io/doxy/docversion.txt | grep '^[0-9][0-9]*\.[0-9][0-9]*-[0-9][0-9]*$'; true)
        version=$(scripts/get-version-from-sources.sh)
        [[ "$version" == "$remote_version" ]] && rebuild=false || rebuild=true
        echo "Current version: $version, latest on tsduck.io: $remote_version"
        echo "VERSION=$version" >>$GITHUB_ENV
        echo "REBUILD=$rebuild" >>$GITHUB_ENV

    - name: Check same version
      if: env.REBUILD == 'false'
      run: echo "Same version as currently published documentation, not rebuilt"

    - name: Build documentation
      if: env.REBUILD == 'true'
      run: |
        # The generated documentation will be published on the TSDuck web site.
        # We need a clean set of documentation, without issues from buggy doxygen versions.
        DOXY_VERSION=$(doxygen --version)
        DOXY_VERSION=${DOXY_VERSION/ */}
        DOXY_AVERSION=(${DOXY_VERSION//./ })
        DOXY_IVERSION=$(( ${DOXY_AVERSION[0]} * 10000 + ${DOXY_AVERSION[1]} * 100 + ${DOXY_AVERSION[2]} ))
        if [[ "$DOXY_IVERSION" -lt 10818 ]]; then
            echo "Obsolete Doxygen version $DOXY_VERSION, rebuilding a more recent one"
            sudo apt install -y cmake flex bison
            mkdir -p bin/doxygen/build
            curl -sL https://github.com/doxygen/doxygen/archive/Release_1_8_20.tar.gz | tar xzf - -C bin/doxygen
            pushd bin/doxygen/build
            cmake -G "Unix Makefiles" ../doxygen-Release_1_8_20
            make
            export PATH=$(cd bin; pwd):$PATH
            popd
            echo "Now using Doxygen" $(doxygen --version)
        fi
        make doxygen
        echo "${{ env.VERSION }}" >bin/doxy/docversion.txt
        (cd bin; zip -qr9 ../doxy.zip doxy)

    - name: Upload doxygen package
      if: env.REBUILD == 'true'
      uses: actions/upload-artifact@master
      with:
        name: doxy-package
        path: doxy.zip
        retention-days: 5
